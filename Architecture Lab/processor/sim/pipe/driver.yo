                            | #######################################################################
                            | # Test for copying block of size 100;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4300b000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f26400000000000000 | 	irmovq $100, %rdx		# src and dst have 100 elements
0x014: 30f68807000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f75804000000000000 | 	irmovq src, %rdi	# src array
                            |     # corrupt all the unused registers to prevent assumptions
0x028: 30f03103710500000000 |     irmovq $0x5710331, %rax
0x032: 30f33103710500000000 |     irmovq $0x5710331, %rbx
0x03c: 30f13103710500000000 |     irmovq $0x5710331, %rcx
0x046: 30f53103710500000000 |     irmovq $0x5710331, %rbp
0x050: 30f83103710500000000 |     irmovq $0x5710331, %r8
0x05a: 30f93103710500000000 |     irmovq $0x5710331, %r9
0x064: 30fa3103710500000000 |     irmovq $0x5710331, %r10
0x06e: 30fb3103710500000000 |     irmovq $0x5710331, %r11
0x078: 30fc3103710500000000 |     irmovq $0x5710331, %r12
0x082: 30fd3103710500000000 |     irmovq $0x5710331, %r13
0x08c: 30fe3103710500000000 |     irmovq $0x5710331, %r14
0x096: 80d000000000000000   | 	call to_binary_string		
                            | 	 
0x09f: 806902000000000000   | 	call check	        # Call checker code
0x0a8: 00                   | 	halt                # should halt with 0xaaaa in %rax
0x0c8:                      | .pos 200
0x0c8:                      | temp_data:
0x0c8: 0000000000000000     |  .quad 0
0x0d0:                      | StartFun:
                            | # Author: Mehmet Rüçhan Yavuzdemir, 2522159
                            | 
                            | # First, I implemented loop unrolling and precomputation, which reduced the CPE from 386 to 59. The reasong behind it is that calculating the right shift every 
                            | # time in a separate loop slows down the benchmark time a lot, and very inefficient. Instead, I precomputed multiples of 2, and put them into registers. Then, 
                            | # according to the andq result, I put '0' or '1'. This way, I saw a pretty good speed up. I avoided computations in the hot regions, tried to distribute them.
                            | 
                            | # Next I optimized a small but effective thing. I realized that assigning $48 and $49 at each step was unnecessary as I do it more frequent than andq checkings. 
                            | # I reserved %r13 and %r14 for $48 and $49. This optimization further reduced the CPE from 59 to 51, 8 CPE speedup. Finally, I made the application 7.5x faster! 
                            | 
                            | ##################################################################
                            | # %rdi = arr, %rsi = buff, %rdx = len
0x0d0:                      | to_binary_string:
                            |     # sum = 0
0x0d0: 6300                 |     xorq %rax,%rax
                            | 
                            |     # len <= 0 ?
0x0d2: 6222                 |     andq %rdx,%rdx
0x0d4: 716802000000000000   |     jle Done
                            | 
0x0dd:                      | While_Loop:    
                            |     # val = *arr
0x0dd: 50370000000000000000 |     mrmovq (%rdi), %rbx
                            | 
                            |     # sum += val
0x0e7: 6030                 |     addq %rbx, %rax 
                            | 
0x0e9: 30f58000000000000000 |     irmovq $128, %rbp
0x0f3: 30f84000000000000000 |     irmovq $64, %r8
0x0fd: 30f92000000000000000 |     irmovq $32, %r9
0x107: 30fa1000000000000000 |     irmovq $16, %r10
0x111: 30fb0800000000000000 |     irmovq $8, %r11
0x11b: 30fc0400000000000000 |     irmovq $4, %r12
                            | 
                            |     # irmovq $2, %r13
                            |     # irmovq $1, %r14
                            | 
0x125: 30fd3000000000000000 |     irmovq $48, %r13
0x12f: 30fe3100000000000000 |     irmovq $49, %r14
                            | 
0x139:                      | E1:
                            |     # = '0'
0x139: 40d60000000000000000 |     rmmovq %r13, (%rsi)
                            | 
0x143: 6235                 |     andq %rbx, %rbp
0x145: 735801000000000000   |     je E2 # & == 0 ?
                            | 
                            |     # = '1'
0x14e: 40e60000000000000000 |     rmmovq %r14, (%rsi)
                            | 
0x158:                      | E2:
                            |     # = '0'
0x158: 40d60100000000000000 |     rmmovq %r13, 1(%rsi)
                            | 
0x162: 6238                 |     andq %rbx, %r8
0x164: 737701000000000000   |     je E3 # & == 0 ?
                            | 
                            |     # = '1'
0x16d: 40e60100000000000000 |     rmmovq %r14, 1(%rsi)
                            | 
0x177:                      | E3:
                            |     # = '0'    
0x177: 40d60200000000000000 |     rmmovq %r13, 2(%rsi)
                            | 
0x181: 6239                 |     andq %rbx, %r9
0x183: 739601000000000000   |     je E4 # & == 0 ?
                            | 
                            |     # = '1'
0x18c: 40e60200000000000000 |     rmmovq %r14, 2(%rsi)
                            | 
0x196:                      | E4:
                            |     # = '0'
0x196: 40d60300000000000000 |     rmmovq %r13, 3(%rsi)
                            | 
0x1a0: 623a                 |     andq %rbx, %r10
0x1a2: 73b501000000000000   |     je E5 # & == 0 ?
                            | 
                            |     # = '1'
0x1ab: 40e60300000000000000 |     rmmovq %r14, 3(%rsi)
                            | 
0x1b5:                      | E5:
                            |     # = '0'
0x1b5: 40d60400000000000000 |     rmmovq %r13, 4(%rsi)
                            | 
0x1bf: 623b                 |     andq %rbx, %r11
0x1c1: 73d401000000000000   |     je E6 # & == 0 ?
                            | 
                            |     # = '1'
0x1ca: 40e60400000000000000 |     rmmovq %r14, 4(%rsi)
                            | 
0x1d4:                      | E6:
                            |     # = '0'
0x1d4: 40d60500000000000000 |     rmmovq %r13, 5(%rsi)
                            | 
0x1de: 623c                 |     andq %rbx, %r12
0x1e0: 73f301000000000000   |     je E7 # & == 0 ?
                            | 
                            |     # = '1'
0x1e9: 40e60500000000000000 |     rmmovq %r14, 5(%rsi)
                            | 
0x1f3:                      | E7:
                            |     # = '0'
0x1f3: 40d60600000000000000 |     rmmovq %r13, 6(%rsi)
                            | 
0x1fd: 30f10200000000000000 |     irmovq $2, %rcx
0x207: 6231                 |     andq %rbx, %rcx
0x209: 731c02000000000000   |     je E8 # & == 0 ?
                            | 
                            |     # = '1'
0x212: 40e60600000000000000 |     rmmovq %r14, 6(%rsi)
                            | 
0x21c:                      | E8:
                            |     # = '0'
0x21c: 40d60700000000000000 |     rmmovq %r13, 7(%rsi)
                            | 
0x226: 30f10100000000000000 |     irmovq $1, %rcx
0x230: 6231                 |     andq %rbx, %rcx
0x232: 734502000000000000   |     je Updates # & == 0 ?
                            | 
                            |     # = '1'
0x23b: 40e60700000000000000 |     rmmovq %r14, 7(%rsi)
                            | 
0x245:                      | Updates:
0x245: 30f10800000000000000 |     irmovq $8, %rcx
                            | 
                            |     # arr++
0x24f: 6017                 |     addq %rcx, %rdi 
                            | 
                            |     # buff++
0x251: 6016                 |     addq %rcx, %rsi 
                            |  
                            |     # --len > 0 ?
0x253: 30f10100000000000000 |     irmovq $1, %rcx
0x25d: 6112                 |     subq %rcx, %rdx
0x25f: 76dd00000000000000   |     jg While_Loop
                            |     
0x268:                      | Done:
0x268: 90                   |     ret
0x269:                      | End:
0x269:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 5050.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was converted to string and stored in the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x269:                      | check:
                            | 	# Return value test
0x269: 30faba13000000000000 | 	irmovq $5050,%r10
0x273: 61a0                 | 	subq %r10,%rax
0x275: 739102000000000000   | 	je checkb
0x27e: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x288: 705704000000000000   | 	jmp cdone
0x291:                      | checkb:
                            | 	# Code length check
0x291: 30f06902000000000000 | 	irmovq EndFun,%rax
0x29b: 30f2d000000000000000 | 	irmovq StartFun,%rdx
0x2a5: 6120                 | 	subq %rdx,%rax
0x2a7: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x2b1: 6102                 | 	subq %rax,%rdx
0x2b3: 75cf02000000000000   | 	jge checkm
0x2bc: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x2c6: 705704000000000000   | 	jmp cdone
0x2cf:                      | checkm:
0x2cf: 30f28807000000000000 | 	irmovq dest, %rdx     # Pointer to next destination location
0x2d9: 30f35804000000000000 | 	irmovq src, %rbx      # Pointer to next source location
0x2e3: 30f76400000000000000 | 	irmovq $100,%rdi      # Count
0x2ed: 6277                 | 	andq %rdi,%rdi
0x2ef: 731104000000000000   | 	je checkpre           # Skip check if count = 0
0x2f8:                      | mcloop:
0x2f8: 30fac800000000000000 | 	irmovq  temp_data, %r10       # temp_data
0x302: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x30c: 30f18000000000000000 | 	irmovq $128, %rcx       # pow = 128
0x316:                      | L1:
0x316: 6211                 |         andq %rcx,%rcx    	 # pow <= 0?
0x318: 719403000000000000   |         jle mcheck	
0x321: 2018                 | 	rrmovq %rcx, %r8
0x323: 6168                 |         subq %rsi, %r8
0x325: 764d03000000000000   |         jg L2                # check if val >= pow
0x32e: 6116                 |         subq %rcx, %rsi        # val -= pow;
0x330: 30f83100000000000000 |         irmovq $49, %r8         
0x33a: 408a0000000000000000 |         rmmovq %r8, (%r10)     # *temp = '1'
0x344: 706103000000000000   |         jmp L3
0x34d:                      | L2:   
0x34d: 30f83000000000000000 |         irmovq $48, %r8
0x357: 408a0000000000000000 |         rmmovq %r8, (%r10)     # *temp = '0'
0x361:                      | L3:  
0x361: 30f80100000000000000 |         irmovq $1, %r8
0x36b: 608a                 |         addq %r8, %r10         # temp++
                            |   
                            |         # all this for pow>>=1
0x36d: 63bb                 |         xorq %r11, %r11          
0x36f:                      | L4:
0x36f: 208c                 |         rrmovq %r8, %r12
0x371: 611c                 |         subq %rcx, %r12
0x373: 738903000000000000   |         je L5
                            |     
0x37c: 208b                 |         rrmovq %r8, %r11
0x37e: 6088                 |         addq %r8, %r8
0x380: 706f03000000000000   |         jmp L4  
0x389:                      | L5:
0x389: 20b1                 |         rrmovq %r11, %rcx
0x38b: 701603000000000000   |         jmp L1
0x394:                      | mcheck:
0x394: 30fac800000000000000 |         irmovq temp_data, %r10
0x39e: 500a0000000000000000 |         mrmovq (%r10), %rax
0x3a8: 50620000000000000000 |         mrmovq (%rdx), %rsi
0x3b2: 6160                 |         subq %rsi, %rax  
0x3b4: 73d003000000000000   | 	je  mok
0x3bd: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax  # Failed test #3
0x3c7: 705704000000000000   | 	jmp cdone
0x3d0:                      | mok:
0x3d0: 30f00800000000000000 | 	irmovq $8,%rax
0x3da: 6002                 | 	addq %rax,%rdx	      # dest++
0x3dc: 6003                 | 	addq %rax,%rbx       # src++
0x3de: 30fac800000000000000 | 	irmovq temp_data, %r10
0x3e8: 30f00000000000000000 | 	irmovq $0, %rax
0x3f2: 400a0000000000000000 | 	rmmovq %rax, (%r10)   #temp_data = 0
0x3fc: 30f00100000000000000 | 	irmovq $1,%rax
0x406: 6107                 | 	subq %rax,%rdi       # cnt--
0x408: 76f802000000000000   | 	jg mcloop
0x411:                      | checkpre:
                            | 	# Check for corruption
0x411: 30f28007000000000000 | 	irmovq Predest,%rdx
0x41b: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x425: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x42f: 6120                 | 	subq %rdx,%rax
0x431: 734d04000000000000   | 	je checkpost
0x43a: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x444: 705704000000000000   | 	jmp cdone
0x44d:                      | checkpost:
                            | 	# Check for corruption
                            | 	#irmovq Postdest,%rdx
                            | 	#mrmovq (%rdx), %rax  # Get word after destination
                            | 	#irmovq $0xdefabc, %rdx
                            | 	#subq %rdx,%rax
                            | 	#je checkok
                            | 	#irmovq $0xeeee,%rax # Failed test #4
                            | 	#jmp cdone
0x44d:                      | checkok:
                            | 	# Successful checks
0x44d: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x457:                      | cdone:
0x457: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x458:                      | 	.align 8
0x458:                      | src:
0x458: 0100000000000000     | 	.quad 1
0x460: 0200000000000000     | 	.quad 2
0x468: 0300000000000000     | 	.quad 3
0x470: 0400000000000000     | 	.quad 4
0x478: 0500000000000000     | 	.quad 5
0x480: 0600000000000000     | 	.quad 6
0x488: 0700000000000000     | 	.quad 7
0x490: 0800000000000000     | 	.quad 8
0x498: 0900000000000000     | 	.quad 9
0x4a0: 0a00000000000000     | 	.quad 10
0x4a8: 0b00000000000000     | 	.quad 11
0x4b0: 0c00000000000000     | 	.quad 12
0x4b8: 0d00000000000000     | 	.quad 13
0x4c0: 0e00000000000000     | 	.quad 14
0x4c8: 0f00000000000000     | 	.quad 15
0x4d0: 1000000000000000     | 	.quad 16
0x4d8: 1100000000000000     | 	.quad 17
0x4e0: 1200000000000000     | 	.quad 18
0x4e8: 1300000000000000     | 	.quad 19
0x4f0: 1400000000000000     | 	.quad 20
0x4f8: 1500000000000000     | 	.quad 21
0x500: 1600000000000000     | 	.quad 22
0x508: 1700000000000000     | 	.quad 23
0x510: 1800000000000000     | 	.quad 24
0x518: 1900000000000000     | 	.quad 25
0x520: 1a00000000000000     | 	.quad 26
0x528: 1b00000000000000     | 	.quad 27
0x530: 1c00000000000000     | 	.quad 28
0x538: 1d00000000000000     | 	.quad 29
0x540: 1e00000000000000     | 	.quad 30
0x548: 1f00000000000000     | 	.quad 31
0x550: 2000000000000000     | 	.quad 32
0x558: 2100000000000000     | 	.quad 33
0x560: 2200000000000000     | 	.quad 34
0x568: 2300000000000000     | 	.quad 35
0x570: 2400000000000000     | 	.quad 36
0x578: 2500000000000000     | 	.quad 37
0x580: 2600000000000000     | 	.quad 38
0x588: 2700000000000000     | 	.quad 39
0x590: 2800000000000000     | 	.quad 40
0x598: 2900000000000000     | 	.quad 41
0x5a0: 2a00000000000000     | 	.quad 42
0x5a8: 2b00000000000000     | 	.quad 43
0x5b0: 2c00000000000000     | 	.quad 44
0x5b8: 2d00000000000000     | 	.quad 45
0x5c0: 2e00000000000000     | 	.quad 46
0x5c8: 2f00000000000000     | 	.quad 47
0x5d0: 3000000000000000     | 	.quad 48
0x5d8: 3100000000000000     | 	.quad 49
0x5e0: 3200000000000000     | 	.quad 50
0x5e8: 3300000000000000     | 	.quad 51
0x5f0: 3400000000000000     | 	.quad 52
0x5f8: 3500000000000000     | 	.quad 53
0x600: 3600000000000000     | 	.quad 54
0x608: 3700000000000000     | 	.quad 55
0x610: 3800000000000000     | 	.quad 56
0x618: 3900000000000000     | 	.quad 57
0x620: 3a00000000000000     | 	.quad 58
0x628: 3b00000000000000     | 	.quad 59
0x630: 3c00000000000000     | 	.quad 60
0x638: 3d00000000000000     | 	.quad 61
0x640: 3e00000000000000     | 	.quad 62
0x648: 3f00000000000000     | 	.quad 63
0x650: 4000000000000000     | 	.quad 64
0x658: 4100000000000000     | 	.quad 65
0x660: 4200000000000000     | 	.quad 66
0x668: 4300000000000000     | 	.quad 67
0x670: 4400000000000000     | 	.quad 68
0x678: 4500000000000000     | 	.quad 69
0x680: 4600000000000000     | 	.quad 70
0x688: 4700000000000000     | 	.quad 71
0x690: 4800000000000000     | 	.quad 72
0x698: 4900000000000000     | 	.quad 73
0x6a0: 4a00000000000000     | 	.quad 74
0x6a8: 4b00000000000000     | 	.quad 75
0x6b0: 4c00000000000000     | 	.quad 76
0x6b8: 4d00000000000000     | 	.quad 77
0x6c0: 4e00000000000000     | 	.quad 78
0x6c8: 4f00000000000000     | 	.quad 79
0x6d0: 5000000000000000     | 	.quad 80
0x6d8: 5100000000000000     | 	.quad 81
0x6e0: 5200000000000000     | 	.quad 82
0x6e8: 5300000000000000     | 	.quad 83
0x6f0: 5400000000000000     | 	.quad 84
0x6f8: 5500000000000000     | 	.quad 85
0x700: 5600000000000000     | 	.quad 86
0x708: 5700000000000000     | 	.quad 87
0x710: 5800000000000000     | 	.quad 88
0x718: 5900000000000000     | 	.quad 89
0x720: 5a00000000000000     | 	.quad 90
0x728: 5b00000000000000     | 	.quad 91
0x730: 5c00000000000000     | 	.quad 92
0x738: 5d00000000000000     | 	.quad 93
0x740: 5e00000000000000     | 	.quad 94
0x748: 5f00000000000000     | 	.quad 95
0x750: 6000000000000000     | 	.quad 96
0x758: 6100000000000000     | 	.quad 97
0x760: 6200000000000000     | 	.quad 98
0x768: 6300000000000000     | 	.quad 99
0x770: 6400000000000000     | 	.quad 100
0x778: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x780:                      | 	.align 16
0x780:                      | Predest:
0x780: fadebc0000000000     | 	.quad 0xbcdefa
0x788:                      | dest:
0x788: abefcd0000000000     | 	.quad 0xcdefab
0x790: abefcd0000000000     | 	.quad 0xcdefab
0x798: abefcd0000000000     | 	.quad 0xcdefab
0x7a0: abefcd0000000000     | 	.quad 0xcdefab
0x7a8: abefcd0000000000     | 	.quad 0xcdefab
0x7b0: abefcd0000000000     | 	.quad 0xcdefab
0x7b8: abefcd0000000000     | 	.quad 0xcdefab
0x7c0: abefcd0000000000     | 	.quad 0xcdefab
0x7c8: abefcd0000000000     | 	.quad 0xcdefab
0x7d0: abefcd0000000000     | 	.quad 0xcdefab
0x7d8: abefcd0000000000     | 	.quad 0xcdefab
0x7e0: abefcd0000000000     | 	.quad 0xcdefab
0x7e8: abefcd0000000000     | 	.quad 0xcdefab
0x7f0: abefcd0000000000     | 	.quad 0xcdefab
0x7f8: abefcd0000000000     | 	.quad 0xcdefab
0x800: abefcd0000000000     | 	.quad 0xcdefab
0x808: abefcd0000000000     | 	.quad 0xcdefab
0x810: abefcd0000000000     | 	.quad 0xcdefab
0x818: abefcd0000000000     | 	.quad 0xcdefab
0x820: abefcd0000000000     | 	.quad 0xcdefab
0x828: abefcd0000000000     | 	.quad 0xcdefab
0x830: abefcd0000000000     | 	.quad 0xcdefab
0x838: abefcd0000000000     | 	.quad 0xcdefab
0x840: abefcd0000000000     | 	.quad 0xcdefab
0x848: abefcd0000000000     | 	.quad 0xcdefab
0x850: abefcd0000000000     | 	.quad 0xcdefab
0x858: abefcd0000000000     | 	.quad 0xcdefab
0x860: abefcd0000000000     | 	.quad 0xcdefab
0x868: abefcd0000000000     | 	.quad 0xcdefab
0x870: abefcd0000000000     | 	.quad 0xcdefab
0x878: abefcd0000000000     | 	.quad 0xcdefab
0x880: abefcd0000000000     | 	.quad 0xcdefab
0x888: abefcd0000000000     | 	.quad 0xcdefab
0x890: abefcd0000000000     | 	.quad 0xcdefab
0x898: abefcd0000000000     | 	.quad 0xcdefab
0x8a0: abefcd0000000000     | 	.quad 0xcdefab
0x8a8: abefcd0000000000     | 	.quad 0xcdefab
0x8b0: abefcd0000000000     | 	.quad 0xcdefab
0x8b8: abefcd0000000000     | 	.quad 0xcdefab
0x8c0: abefcd0000000000     | 	.quad 0xcdefab
0x8c8: abefcd0000000000     | 	.quad 0xcdefab
0x8d0: abefcd0000000000     | 	.quad 0xcdefab
0x8d8: abefcd0000000000     | 	.quad 0xcdefab
0x8e0: abefcd0000000000     | 	.quad 0xcdefab
0x8e8: abefcd0000000000     | 	.quad 0xcdefab
0x8f0: abefcd0000000000     | 	.quad 0xcdefab
0x8f8: abefcd0000000000     | 	.quad 0xcdefab
0x900: abefcd0000000000     | 	.quad 0xcdefab
0x908: abefcd0000000000     | 	.quad 0xcdefab
0x910: abefcd0000000000     | 	.quad 0xcdefab
0x918: abefcd0000000000     | 	.quad 0xcdefab
0x920: abefcd0000000000     | 	.quad 0xcdefab
0x928: abefcd0000000000     | 	.quad 0xcdefab
0x930: abefcd0000000000     | 	.quad 0xcdefab
0x938: abefcd0000000000     | 	.quad 0xcdefab
0x940: abefcd0000000000     | 	.quad 0xcdefab
0x948: abefcd0000000000     | 	.quad 0xcdefab
0x950: abefcd0000000000     | 	.quad 0xcdefab
0x958: abefcd0000000000     | 	.quad 0xcdefab
0x960: abefcd0000000000     | 	.quad 0xcdefab
0x968: abefcd0000000000     | 	.quad 0xcdefab
0x970: abefcd0000000000     | 	.quad 0xcdefab
0x978: abefcd0000000000     | 	.quad 0xcdefab
0x980: abefcd0000000000     | 	.quad 0xcdefab
0x988: abefcd0000000000     | 	.quad 0xcdefab
0x990: abefcd0000000000     | 	.quad 0xcdefab
0x998: abefcd0000000000     | 	.quad 0xcdefab
0x9a0: abefcd0000000000     | 	.quad 0xcdefab
0x9a8: abefcd0000000000     | 	.quad 0xcdefab
0x9b0: abefcd0000000000     | 	.quad 0xcdefab
0x9b8: abefcd0000000000     | 	.quad 0xcdefab
0x9c0: abefcd0000000000     | 	.quad 0xcdefab
0x9c8: abefcd0000000000     | 	.quad 0xcdefab
0x9d0: abefcd0000000000     | 	.quad 0xcdefab
0x9d8: abefcd0000000000     | 	.quad 0xcdefab
0x9e0: abefcd0000000000     | 	.quad 0xcdefab
0x9e8: abefcd0000000000     | 	.quad 0xcdefab
0x9f0: abefcd0000000000     | 	.quad 0xcdefab
0x9f8: abefcd0000000000     | 	.quad 0xcdefab
0xa00: abefcd0000000000     | 	.quad 0xcdefab
0xa08: abefcd0000000000     | 	.quad 0xcdefab
0xa10: abefcd0000000000     | 	.quad 0xcdefab
0xa18: abefcd0000000000     | 	.quad 0xcdefab
0xa20: abefcd0000000000     | 	.quad 0xcdefab
0xa28: abefcd0000000000     | 	.quad 0xcdefab
0xa30: abefcd0000000000     | 	.quad 0xcdefab
0xa38: abefcd0000000000     | 	.quad 0xcdefab
0xa40: abefcd0000000000     | 	.quad 0xcdefab
0xa48: abefcd0000000000     | 	.quad 0xcdefab
0xa50: abefcd0000000000     | 	.quad 0xcdefab
0xa58: abefcd0000000000     | 	.quad 0xcdefab
0xa60: abefcd0000000000     | 	.quad 0xcdefab
0xa68: abefcd0000000000     | 	.quad 0xcdefab
0xa70: abefcd0000000000     | 	.quad 0xcdefab
0xa78: abefcd0000000000     | 	.quad 0xcdefab
0xa80: abefcd0000000000     | 	.quad 0xcdefab
0xa88: abefcd0000000000     | 	.quad 0xcdefab
0xa90: abefcd0000000000     | 	.quad 0xcdefab
0xa98: abefcd0000000000     | 	.quad 0xcdefab
0xaa0: abefcd0000000000     | 	.quad 0xcdefab
0xaa8:                      | Postdest:
0xaa8: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0xab0:                      | .align 8
                            | # Run time stack
0xab0: 0000000000000000     | 	.quad 0
0xab8: 0000000000000000     | 	.quad 0
0xac0: 0000000000000000     | 	.quad 0
0xac8: 0000000000000000     | 	.quad 0
0xad0: 0000000000000000     | 	.quad 0
0xad8: 0000000000000000     | 	.quad 0
0xae0: 0000000000000000     | 	.quad 0
0xae8: 0000000000000000     | 	.quad 0
0xaf0: 0000000000000000     | 	.quad 0
0xaf8: 0000000000000000     | 	.quad 0
0xb00: 0000000000000000     | 	.quad 0
0xb08: 0000000000000000     | 	.quad 0
0xb10: 0000000000000000     | 	.quad 0
0xb18: 0000000000000000     | 	.quad 0
0xb20: 0000000000000000     | 	.quad 0
0xb28: 0000000000000000     | 	.quad 0
                            | 
0xb30:                      | Stack:
